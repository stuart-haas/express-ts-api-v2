include:
  - project: 'vision-by-scope/infra/ci-templates'
    ref: master
    file: 
      - '/terraform/Base.gitlab-ci.yml'
      - '/ci/Node-Base.gitlab-ci.yml'
      - '/ci/Node-Install.gitlab-ci.yml'
      - '/ci/Node-Lint.gitlab-ci.yml'

default:
  tags:
    - scope-gitlab-runner

.terraform:
  environment: $CI_COMMIT_BRANCH
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/ops/terraform
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_BRANCH}
    TF_CLI_CONFIG_FILE: ${CI_PROJECT_DIR}/ops/terraform/.terraformrc
    ECS_CLUSTER_NAME: "terraform-default-cluster"
    ECS_TASK_MEMORY: "2048"
    ECS_TASK_CPU: "1024"
    ECS_EXECUTION_ROLE_NAME: "terraform-ecs_execution_role-iam"
    ECS_TASK_ROLE_NAME: "terraform-ecs_task_role-iam"
    TF_VAR_app_name: $CI_PROJECT_NAME
    TF_VAR_app_environment: $CI_COMMIT_BRANCH
    TF_VAR_vpc_id: "vpc-06d8a315c802fe878"
    TF_VAR_ecs_task_sg_id: "sg-03d8a58ac4e0e94b0"
    TF_VAR_lb_name: "terraform-default-lb"
    TF_VAR_ecs_cluster_name: $ECS_CLUSTER_NAME
    TF_VAR_ecs_execution_role_name: $ECS_EXECUTION_ROLE_NAME
    TF_VAR_ecs_task_role_name: $ECS_TASK_ROLE_NAME
    TF_VAR_task_memory: $ECS_TASK_MEMORY
    TF_VAR_task_cpu: $ECS_TASK_CPU
    TF_VAR_session_secret: $TF_VAR_SESSION_SECRET
    TF_VAR_jwt_secret: $TF_VAR_JWT_SECRET
    TF_VAR_db_host: $TF_VAR_DB_HOST
    TF_VAR_db_username: $TF_VAR_DB_USERNAME
    TF_VAR_db_password: $TF_VAR_DB_PASSWORD
    TF_VAR_db_database: $TF_VAR_DB_DATABASE
    TF_VAR_sendgrid_api_key: $TF_VAR_SENDGRID_API_KEY
    TF_VAR_sendgrid_from: $TF_VAR_SENDGRID_FROM
    TF_VAR_aws_access_key_id: $AWS_ACCESS_KEY_ID
    TF_VAR_aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    TF_VAR_aws_bucket: $TF_VAR_AWS_BUCKET

.docker:
  image: docker:19.03.10
  services:
    - docker:dind
  variables:
    ECS_CLUSTER_NAME: "terraform-default-cluster"
    ECS_TASK_MEMORY: "2048"
    ECS_TASK_CPU: "1024"
    ECS_EXECUTION_ROLE_NAME: "terraform-ecs_execution_role-iam"
    ECS_TASK_ROLE_NAME: "terraform-ecs_task_role-iam"
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    ECR_IMAGE: ${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}
    ECS_SERVICE_NAME: ${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}
    ECS_TASK_DEFINITION_NAME: ${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}
  before_script:
    - apk add --no-cache curl jq python3
    - pip3 install awscli
    - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
    - ECS_EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/$ECS_EXECUTION_ROLE_NAME"
    - ECS_TASK_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/$ECS_TASK_ROLE_NAME"
    - ECR_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
    - ECR_IMAGE_URL="$ECR_URL/$ECR_IMAGE"
    - ECR_IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URL

build:
  stage: build
  extends: .docker
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"'
  script:
    - echo "Building image..."
    - docker build -t $ECR_IMAGE_URL:latest -f ops/docker/Dockerfile .
    - echo "Tagging image..."
    - docker tag $ECR_IMAGE_URL:latest $ECR_IMAGE_URL:$ECR_IMAGE_TAG
    - echo "Pushing image..."
    - docker push $ECR_IMAGE_URL:latest
    - docker push $ECR_IMAGE_URL:$ECR_IMAGE_TAG

deploy:
  stage: deploy
  extends: .docker
  environment: $CI_COMMIT_BRANCH
  needs:
    - build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"'
  script:
    - echo $ECR_IMAGE_URL:$ECR_IMAGE_TAG
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$ECS_TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE_URL:$ECR_IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
    - echo "Registering new container definition..."
    - > 
      aws ecs register-task-definition
      --requires-compatibilities "FARGATE"
      --network-mode "awsvpc"
      --region "${AWS_DEFAULT_REGION}"
      --family "${ECS_TASK_DEFINITION_NAME}"
      --container-definitions "${NEW_CONTAINER_DEFINTIION}"
      --cpu 1024
      --memory 2048
      --task-role-arn "${ECS_TASK_ROLE_ARN}"
      --execution-role-arn "${ECS_EXECUTION_ROLE_ARN}"
    - echo "Updating the service..."
    - > 
      aws ecs update-service
      --region "${AWS_DEFAULT_REGION}"
      --cluster "${ECS_CLUSTER_NAME}"
      --service "${ECS_SERVICE_NAME}"
      --task-definition "${ECS_TASK_DEFINITION_NAME}"
    - echo "Stopping previous task..."
    - TASK_ID=$(aws ecs list-tasks --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --output text --query taskArns[0])
    - aws ecs stop-task --cluster "${ECS_CLUSTER_NAME}" --task "${TASK_ID}"
